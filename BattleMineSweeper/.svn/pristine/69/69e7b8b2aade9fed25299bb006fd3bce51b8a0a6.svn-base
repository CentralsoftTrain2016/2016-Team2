package service;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dao.GameDao;
import dao.MassDao;
import dao.PlayerDao;
import domain.CharacterSkillEnum;
import domain.Game;
import domain.IsFinishedEnum;
import domain.ItemEnum;
import domain.Mass;
import domain.Player;
import domain.value.ENDFLAG;
import domain.value.GAMEID;
import domain.value.PLAYERID;
import service.bean.AutoRequestBean;
import service.bean.PlayerBean;

public class ChangeTurnPlayerService extends Service {
	// コンストラクタ
	public ChangeTurnPlayerService() throws SQLException, ClassNotFoundException {
		super();
	}

	public ChangeTurnPlayerService(Connection con){
		super(con);
	}

	public ChangeTurnPlayerService(Service connectService){
		super(connectService);
	}

	// ターンプレイヤーを入れ替える
	public AutoRequestBean changeTurnPlayer(GAMEID gameID){
		GameDao gdao = new GameDao(this.con);
		try {
			gdao.updateTurn(gameID);

			// bean
			AutoRequestBean arb = new AutoRequestBean();
			arb.setIsMyTurn(false);
			return arb;
		} catch (SQLException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	// ターンプレイヤーかどうか確認
	public AutoRequestBean checkTurnPlayer(GAMEID gameID, PLAYERID playerID){
		try {
			GameDao gdao = new GameDao(this.con);

			// bean
			AutoRequestBean arb = new AutoRequestBean();
			arb.setIsMyTurn(gdao.isMyTurn(gameID, playerID));

			return arb;
		} catch (SQLException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	// ターンプレイヤーかどうかorゲーム終了したかどうか確認
	public AutoRequestBean checkTurnPlayerOrGameFinished(GAMEID gameID, PLAYERID playerID){
		try {
			GameDao gdao = new GameDao(this.con);
			PlayerDao pdao = new PlayerDao(this.con);
			Game gm;

			gm = gdao.getGame(gameID.get());
			Player mp = pdao.getPlayer(playerID.get());
			Player ep;
			PLAYERID p1ID = gm.getPLAYER1ID();
			PLAYERID p2ID = gm.getPLAYER2ID();

			// 相手のプレイヤーの情報を取得
			if (p1ID.get() == playerID.get()) {
				ep = pdao.getPlayer(p2ID.get());
			} else {
				ep = pdao.getPlayer(p1ID.get());
			}

			CharacterSkillEnum enemyCharacterEnum = null;

			// 自分のキャラクターのIDを取得
			CharacterSkillEnum myCharacterEnum = CharacterSkillEnum.getSkillEnumByValue(mp.getCHARACTERID().get());
			// 相手のキャラクターのIDを取得
			if (ep != null) {
				enemyCharacterEnum = CharacterSkillEnum.getSkillEnumByValue(ep.getCHARACTERID().get());
			}
			// bean
			AutoRequestBean arb = new AutoRequestBean();
			// arb.setIsMyTurn(gdao.isMyTurn(gameID, playerID));

			arb.setIsMyTurn(gm.getTURNPLAYERID().get() == playerID.get());
			arb.setIsFinished(gm.getISFINISHED() == IsFinishedEnum.FINISHED);
			arb.setPlayerCharacterImageURL(myCharacterEnum.getImageURL());
			arb.setPlayerCharacterWaitImageURL(myCharacterEnum.getWaitImageURL());


			if (ep != null) {
				arb.setEnemyCharacterImageURL(enemyCharacterEnum.getImageURL());
				arb.setEnemyCharacterWaitImageURL(enemyCharacterEnum.getWaitImageURL());
			} else {
				arb.setEnemyCharacterImageURL("");
				arb.setEnemyCharacterWaitImageURL("");
			}

			//両プレイヤーをbeanにセット
			PlayerBean myPlayerBean = new PlayerBean();
			myPlayerBean.setCoolTime(mp.getCOOLTIME().get());
			myPlayerBean.setSkillURL(myCharacterEnum.getskillURL());
			if(mp.getITEMID().get() != 0) myPlayerBean.setItemURL(  ItemEnum.getItemEnum( mp.getITEMID().get() ).getItemURL() );

			arb.setMyPlayerBean(myPlayerBean);

			PlayerBean enemyPlayerBean = new PlayerBean();
			if(ep != null){
				enemyPlayerBean.setCoolTime(ep.getCOOLTIME().get());
				enemyPlayerBean.setSkillURL(enemyCharacterEnum.getskillURL());
			}
			if(ep.getITEMID().get()!=0) enemyPlayerBean.setItemURL(  ItemEnum.getItemEnum( ep.getITEMID().get() ).getItemURL() );
			else enemyPlayerBean.setItemURL("");

			arb.setEnemyPlayerBean(enemyPlayerBean);

			return arb;
		} catch (SQLException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	// ターン入れ替え時orゲーム終了時に非ターンプレイヤーのマス状態を入れ替えるためのリスト取得
	public List<Mass> getAllMass(GAMEID gameID){
		try {
			List<Mass> massList = new ArrayList<Mass>();

			MassDao mdao = new MassDao(this.con);

			for (int i = 1; i <= 256; i++) {
				massList.add(mdao.getMass(i, gameID.get()));
			}

			// クリア時に旗立てる
			if (mdao.isOpenedAllMass(gameID)) {
				for (Mass mass : massList) {
					mass.setENDFLAG(new ENDFLAG(true));
				}
			}

			return massList;
		} catch (SQLException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
}
